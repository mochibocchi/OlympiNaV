Index: app/src/main/java/com/example/olympinav/ViewTripActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.olympinav;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.ColorStateList;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.ColorRes;\r\nimport androidx.annotation.DrawableRes;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.cardview.widget.CardView;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.olympinav.Utils.Utils;\r\nimport com.example.olympinav.models.TravelMethod;\r\nimport com.example.olympinav.models.TravelType;\r\nimport com.example.olympinav.models.Trip;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.CameraPosition;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.material.card.MaterialCardView;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.List;\r\n\r\npublic class ViewTripActivity extends BaseActivity {\r\n    private static final DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"hh:mma\");\r\n  private Trip trip;\r\n  private TripStintReyclerView adapter;\r\n  private GoogleMap map;\r\n  private AlertDialog dialog;\r\n\r\n  @Override\r\n  protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_view_trip);\r\n    SupportMapFragment mapFragment = (SupportMapFragment)  getSupportFragmentManager().findFragmentById(R.id.map);\r\n    mapFragment.getMapAsync(m -> {\r\n        map = m;\r\n        map.animateCamera(CameraUpdateFactory.newCameraPosition(new CameraPosition(new LatLng(-27.4705, 153.0260), 12,\r\n            30, 0)));\r\n    });\r\n    setupActivity();\r\n    trip = (Trip) getIntent().getParcelableExtra(\"trip\");\r\n    setupViews();\r\n    setupRecyclerView();\r\n  }\r\n\r\n  private void setupViews() {\r\n      TextView time = findViewById(R.id.time);\r\n      time.setText(trip.getDepartAt().format(timeFormatter) + \" - \" + trip.getArriveAt().format(timeFormatter));\r\n      TextView duration = findViewById(R.id.duration);\r\n      duration.setText(trip.getDuration(ChronoUnit.MINUTES) + \" minutes\");\r\n      TextView price = findViewById(R.id.price);\r\n      price.setText(\"$3.51\"); // Don't have a price system\r\n      // Finish button opens up a feedback dialogue:\r\n      FloatingActionButton finishBtn = findViewById(R.id.openFeedbackDialogueFAB);\r\n      finishBtn.setOnClickListener(v -> {\r\n          PromptUserForTripFeedback();\r\n      });\r\n  }\r\n\r\n  private void setupRecyclerView() {\r\n    RecyclerView recyclerView = findViewById(R.id.recyclerView);\r\n    adapter = new TripStintReyclerView(trip.getTravelMethods());\r\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\r\n    recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n    recyclerView.setAdapter(adapter);\r\n  }\r\n\r\n  class TripStintReyclerView extends RecyclerView.Adapter<TripStintViewHolder> {\r\n      List<TravelMethod> travelMethods;\r\n\r\n      public TripStintReyclerView(List<TravelMethod> tms) {\r\n          this.travelMethods = tms;\r\n      }\r\n\r\n    @NonNull\r\n    @Override\r\n    public TripStintViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View v = LayoutInflater.from(ViewTripActivity.this).inflate(R.layout.row_trip_stint, parent, false);\r\n        return new TripStintViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull TripStintViewHolder v, int position) {\r\n        TravelMethod tm = travelMethods.get(position);\r\n\r\n        // Hide all bottom dots except for the last one.\r\n        if (position != getItemCount() - 1) {\r\n            v.bottomDot.setVisibility(View.GONE);\r\n            v.departLocation.setVisibility(View.GONE);\r\n        }\r\n\r\n        @ColorRes int color = tm.getType().getColor();\r\n        @DrawableRes int drawable = tm.getType().getDrawable();\r\n        v.topDot.setCardBackgroundColor(getResources().getColor(color));\r\n        v.section.setCardBackgroundColor(getResources().getColor(color));\r\n        v.bottomDot.setCardBackgroundColor(getResources().getColor(color));\r\n        v.transportNumberParent.setStrokeColor(getResources().getColor(color));\r\n        v.transportNumber.setTextColor(getResources().getColor(color));\r\n        v.busImage.setBackgroundResource(drawable);\r\n        v.boardLocation.setTextColor(getResources().getColor(color));\r\n        v.departLocation.setTextColor(getResources().getColor(color));\r\n        v.tripDuration.setTextColor(getResources().getColor(color));\r\n\r\n\r\n        v.boardLocation.setText(\"Board Location\");\r\n        v.departLocation.setText(\"Depart Location\");\r\n        v.transportNumber.setText(tm.getType() == TravelType.WALK ? \"WALK\" : tm.getRouteNumber());\r\n        v.tripDuration.setText(ChronoUnit.MINUTES.between(tm.getDepartAt(), tm.getArriveAt()) + \" minutes\");\r\n\r\n        if (tm.getType() != TravelType.WALK) {\r\n            int noiseLevelColor = Utils.getProgressBarColor(tm.getNoiseLevel().toProgressBarPercentage());\r\n            v.noiseLevel.setText(tm.getNoiseLevel().getDisplayString());\r\n            v.noiseLevel.setTextColor(getResources().getColor(noiseLevelColor));\r\n            v.noiseLevelProgressBar.setProgress(tm.getNoiseLevel().toProgressBarPercentage());\r\n            v.noiseLevelProgressBar.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));\r\n            int usedCapacityColor = Utils.getProgressBarColor(tm.getUsedCapacity().toProgressBarPercentage());\r\n            v.usedCapacity.setText(tm.getUsedCapacity().getDisplayString());\r\n            v.usedCapacity.setTextColor(getResources().getColor(usedCapacityColor));\r\n            v.usedCapacityProgressBar.setProgress(tm.getUsedCapacity().toProgressBarPercentage());\r\n            v.usedCapacityProgressBar.setProgressTintList(ColorStateList.valueOf(getResources().getColor(usedCapacityColor)));\r\n\r\n//            v.noiseLevel.setTextColor(getResources().getColor(color));\r\n//            v.usedCapacity.setTextColor(getResources().getColor(color));\r\n        } else {\r\n            v.noiseLevel.setVisibility(View.GONE);\r\n            v.noiseLevelProgressBar.setVisibility(View.GONE);\r\n            v.usedCapacity.setVisibility(View.GONE);\r\n            v.usedCapacityProgressBar.setVisibility(View.GONE);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n      return travelMethods.size();\r\n    }\r\n  }\r\n\r\n  static class TripStintViewHolder extends RecyclerView.ViewHolder {\r\n      CardView topDot;\r\n      CardView section;\r\n      CardView bottomDot;\r\n\r\n      MaterialCardView transportNumberParent;\r\n      ImageView busImage;\r\n      TextView transportNumber;\r\n\r\n      TextView boardLocation;\r\n      TextView departLocation;\r\n\r\n      TextView tripDuration;\r\n      TextView noiseLevel;\r\n      ProgressBar noiseLevelProgressBar;\r\n      TextView usedCapacity;\r\n      ProgressBar usedCapacityProgressBar;\r\n\r\n      public TripStintViewHolder(View itemView) {\r\n          super(itemView);\r\n\r\n          topDot = itemView.findViewById(R.id.topDot);\r\n          section = itemView.findViewById(R.id.section);\r\n          bottomDot = itemView.findViewById(R.id.bottomDot);\r\n          transportNumberParent = itemView.findViewById(R.id.transportNumberParent);\r\n          busImage = itemView.findViewById(R.id.busImage);\r\n          transportNumber = itemView.findViewById(R.id.transportNumber);\r\n          boardLocation = itemView.findViewById(R.id.boardLocation);\r\n          departLocation = itemView.findViewById(R.id.departLocation);\r\n          tripDuration = itemView.findViewById(R.id.tripDuration);\r\n          noiseLevel = itemView.findViewById(R.id.noiseLevelTextView);\r\n          noiseLevelProgressBar = itemView.findViewById(R.id.noiseLevelProgressBar);\r\n          usedCapacity = itemView.findViewById(R.id.usedCapacityTextView);\r\n          usedCapacityProgressBar = itemView.findViewById(R.id.usedCapacityProgressBar);\r\n      }\r\n  }\r\n\r\n//    This is our IoT solution for transforming noise level sensor data:\r\n//    - There will be sound sensors on public transports, monitoring noise levels real-time.\r\n//    - Each user has their own personalised, stored baseline audio level threshold preference.\r\n//    - Each user will be able to personalise their threshold by feeding it more data through feedback.\r\n//    - That is, at the end of every trip, the user is prompted \"How was the sound level?\"\r\n//      then they will select sad face, neutral face, happy face.\r\n//\r\n//    - Additionally, we have a 'global baseline' sound level threshold which is fed through the backend api - as in, this is\r\n//      what the average people think this is the acceptable noise.\r\n//\r\n//    This global baseline will also continue to change based on feedback from the users when they finish a trip.\r\n//\r\n//    Finally, we transform the data and putting it into real-life use by comparing the global baseline\r\n//    versus the user's personalised sound level baseline threshold.\r\n//    This real-life application will be useful for people with ADHD or autism, and for those who may\r\n//    are uncomfortable with loud environments.\r\n\r\n    private void PromptUserForTripFeedback() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        View dialogView = getLayoutInflater().inflate(R.layout.dialog_end_of_trip_feedback, null);\r\n        builder.setView(dialogView);\r\n\r\n        ImageButton happyButton = dialogView.findViewById(R.id.noiseLevelHappyFace);\r\n        ImageButton neutralButton = dialogView.findViewById(R.id.noiseLevelNeutralFace);\r\n        ImageButton sadButton = dialogView.findViewById(R.id.noiseLevelSadFace);\r\n\r\n        happyButton.setOnClickListener(v -> {\r\n            Toast.makeText(this, \"Thanks for your feedback!\", Toast.LENGTH_SHORT).show();\r\n            dialog.dismiss();\r\n            Intent intent = new Intent(ViewTripActivity.this, MainActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        neutralButton.setOnClickListener(v -> {\r\n            updateUserNoiseBaseLevel(10);\r\n            Toast.makeText(this, \"We'll adjust your personalised noise threshold.\", Toast.LENGTH_SHORT).show();\r\n            dialog.dismiss();\r\n            Intent intent = new Intent(ViewTripActivity.this, MainActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        sadButton.setOnClickListener(v -> {\r\n            updateUserNoiseBaseLevel(25);\r\n            Toast.makeText(this, \"We'll adjust your personalised noise threshold.\", Toast.LENGTH_SHORT).show();\r\n            dialog.dismiss();\r\n            Intent intent = new Intent(ViewTripActivity.this, MainActivity.class);\r\n            startActivity(intent);\r\n        });\r\n\r\n        dialog = builder.create();\r\n        builder.setNegativeButton(\"Cancel\", null);\r\n        dialog.show();\r\n    }\r\n\r\n    private void updateUserNoiseBaseLevel(int feedback) {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserDataPref\", Context.MODE_PRIVATE);\r\n        int currentBaseLevel = sharedPreferences.getInt(\"UserNoiseBaselineLevel\", 0);\r\n\r\n        currentBaseLevel += feedback;\r\n\r\n        // Save the updated user's updated UserNoiseBaseLevel back to SharedPreferences\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.putInt(\"UserNoiseBaseLevel\", currentBaseLevel);\r\n        editor.apply();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/olympinav/ViewTripActivity.java b/app/src/main/java/com/example/olympinav/ViewTripActivity.java
--- a/app/src/main/java/com/example/olympinav/ViewTripActivity.java	(revision d2f9b3fb2c7c50807cabbd6b61fb8309f9cb2d50)
+++ b/app/src/main/java/com/example/olympinav/ViewTripActivity.java	(date 1698661539035)
@@ -3,7 +3,6 @@
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.content.res.ColorStateList;
 import android.os.Bundle;
 import android.view.LayoutInflater;
@@ -129,7 +128,7 @@
 
         if (tm.getType() != TravelType.WALK) {
             int noiseLevelColor = Utils.getProgressBarColor(tm.getNoiseLevel().toProgressBarPercentage());
-            v.noiseLevel.setText(tm.getNoiseLevel().getDisplayString());
+            v.noiseLevel.setText((tm.getNoiseLevel()).getDisplayString());
             v.noiseLevel.setTextColor(getResources().getColor(noiseLevelColor));
             v.noiseLevelProgressBar.setProgress(tm.getNoiseLevel().toProgressBarPercentage());
             v.noiseLevelProgressBar.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));
@@ -210,6 +209,7 @@
 //    are uncomfortable with loud environments.
 
     private void PromptUserForTripFeedback() {
+        UserSettingsManager userSettingsManager = new UserSettingsManager(getSharedPreferences("UserDataPref", Context.MODE_PRIVATE));
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         View dialogView = getLayoutInflater().inflate(R.layout.dialog_end_of_trip_feedback, null);
         builder.setView(dialogView);
@@ -226,7 +226,7 @@
         });
 
         neutralButton.setOnClickListener(v -> {
-            updateUserNoiseBaseLevel(10);
+            userSettingsManager.updateUserNoiseBaseLevel(10);
             Toast.makeText(this, "We'll adjust your personalised noise threshold.", Toast.LENGTH_SHORT).show();
             dialog.dismiss();
             Intent intent = new Intent(ViewTripActivity.this, MainActivity.class);
@@ -234,7 +234,7 @@
         });
 
         sadButton.setOnClickListener(v -> {
-            updateUserNoiseBaseLevel(25);
+            userSettingsManager.updateUserNoiseBaseLevel(25);
             Toast.makeText(this, "We'll adjust your personalised noise threshold.", Toast.LENGTH_SHORT).show();
             dialog.dismiss();
             Intent intent = new Intent(ViewTripActivity.this, MainActivity.class);
@@ -245,16 +245,4 @@
         builder.setNegativeButton("Cancel", null);
         dialog.show();
     }
-
-    private void updateUserNoiseBaseLevel(int feedback) {
-        SharedPreferences sharedPreferences = getSharedPreferences("UserDataPref", Context.MODE_PRIVATE);
-        int currentBaseLevel = sharedPreferences.getInt("UserNoiseBaselineLevel", 0);
-
-        currentBaseLevel += feedback;
-
-        // Save the updated user's updated UserNoiseBaseLevel back to SharedPreferences
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.putInt("UserNoiseBaseLevel", currentBaseLevel);
-        editor.apply();
-    }
 }
Index: app/src/main/java/com/example/olympinav/PlanTripActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.olympinav;\r\n\r\nimport static com.example.olympinav.EventDetailsActivity.EXTRA_END_LOCATION;\r\nimport static com.example.olympinav.EventDetailsActivity.EXTRA_START_LOCATION;\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.ColorStateList;\r\nimport android.graphics.Color;\r\nimport android.graphics.ColorFilter;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.Switch;\r\nimport android.widget.TableRow;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.ColorRes;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.constraintlayout.widget.ConstraintLayout;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.example.olympinav.Utils.Utils;\r\nimport com.example.olympinav.generators.Generator;\r\nimport com.example.olympinav.models.TravelMethod;\r\nimport com.example.olympinav.models.TravelType;\r\nimport com.example.olympinav.models.Trip;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.ZoneId;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ThreadLocalRandom;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class PlanTripActivity extends BaseActivity {\r\n  private List<Trip> trips = new ArrayList<>();\r\n  private LocalDateTime datetime;\r\n  private TripPlannerRecyclerViewAdapter adapter;\r\n  private EditText startLocationET;\r\n  private EditText endLocationET;\r\n\r\n  @Override\r\n  protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_plan_trip);\r\n    getPrefilledLocations(); // If user opens up from vehicleDetailsActivity, grab the event address from the event item\r\n    setupActivity();\r\n    setupRecyclerView();\r\n    setupTripDetailsFields();\r\n    setupNoiseSensitivityToggle(); // If user toggles Sensitive to Noise on, it will add more to the noise level.\r\n    setupPrioritiseSeatsToggle(); // If user toggles Prioritise Seats on, it will add more to the capacity level.\r\n  }\r\n  private void setupPrioritiseSeatsToggle() {\r\n    Switch prioritiseSeatsToggle = findViewById(R.id.PrioritiseSeatsToggle);\r\n    prioritiseSeatsToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {\r\n    updateTripPrioritiseSeatsState(isChecked);\r\n    });\r\n  }\r\n  private void updateTripPrioritiseSeatsState(boolean isChecked) {\r\n    adapter.setPrioritiseSeatsActive(isChecked);\r\n    adapter.setTrips(trips);\r\n    adapter.notifyDataSetChanged();\r\n  }\r\n  private void setupNoiseSensitivityToggle() {\r\n    Switch sensitiveToNoiseToggle = findViewById(R.id.SensitiveToNoiseToggle);\r\n    sensitiveToNoiseToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {\r\n    updateTripSensitivityState(isChecked);\r\n    });\r\n  }\r\n  private void updateTripSensitivityState(boolean isChecked) {\r\n    adapter.setSensitiveToNoiseActive(isChecked);\r\n    adapter.setTrips(trips);\r\n    adapter.notifyDataSetChanged();\r\n  }\r\n  private void setupTripDetailsFields() {\r\n    startLocationET = findViewById(R.id.startLocationET);\r\n    endLocationET = findViewById(R.id.endLocationET);\r\n\r\n    Spinner tripTypeSpinner = findViewById(R.id.tripTypeSpinner);\r\n    ArrayAdapter<CharSequence> arrayAdapter = ArrayAdapter.createFromResource(this,\r\n        R.array.plan_trip_options, android.R.layout.simple_spinner_item);\r\n    arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n    tripTypeSpinner.setAdapter(arrayAdapter);\r\n\r\n    EditText tripDateTimeET = findViewById(R.id.tripDateTimeET);\r\n    tripDateTimeET.setOnClickListener(v -> {\r\n      Calendar date;\r\n      final Calendar currentDate = Calendar.getInstance();\r\n      date = Calendar.getInstance();\r\n      new DatePickerDialog(PlanTripActivity.this, (view, year, monthOfYear, dayOfMonth) -> {\r\n        date.set(year, monthOfYear, dayOfMonth);\r\n        new TimePickerDialog(PlanTripActivity.this, (view1, hourOfDay, minute) -> {\r\n          date.set(Calendar.HOUR_OF_DAY, hourOfDay);\r\n          date.set(Calendar.MINUTE, minute);\r\n          datetime = LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n          tripDateTimeET.setText(datetime.format(DateTimeFormatter.ofPattern(\"hh:mma dd/MM/yy\")));\r\n        }, currentDate.get(Calendar.HOUR_OF_DAY), currentDate.get(Calendar.MINUTE), false).show();\r\n      }, currentDate.get(Calendar.YEAR), currentDate.get(Calendar.MONTH), currentDate.get(Calendar.DATE)).show();\r\n    });\r\n\r\n\r\n    tripTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n      @Override\r\n      public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {\r\n        if (arrayAdapter.getItem(i).equals(\"Now\")) {\r\n          tripDateTimeET.setText(\"\");\r\n          tripDateTimeET.setVisibility(View.GONE);\r\n          datetime = LocalDateTime.now();\r\n        } else {\r\n          tripDateTimeET.setVisibility(View.VISIBLE);\r\n          tripDateTimeET.callOnClick();\r\n        }\r\n      }\r\n\r\n      @Override\r\n      public void onNothingSelected(AdapterView<?> adapterView) {\r\n      }\r\n    });\r\n\r\n    Button searchButton = findViewById(R.id.searchButton);\r\n    searchButton.setOnClickListener(v -> {\r\n      if (startLocationET.getText().length() == 0) {\r\n        Toast.makeText(PlanTripActivity.this, \"Please enter a start location\", Toast.LENGTH_SHORT).show();\r\n        return;\r\n      }\r\n      if (endLocationET.getText().length() == 0) {\r\n        Toast.makeText(PlanTripActivity.this, \"Please enter an end location\", Toast.LENGTH_SHORT).show();\r\n        return;\r\n      }\r\n      trips = new ArrayList<>();\r\n      int options = ThreadLocalRandom.current().nextInt(3, 6);\r\n      if (tripTypeSpinner.getSelectedItemPosition() == 2)\r\n        for (int i = 0; i < options; i++) trips.add(Generator.generateTripBackwards(datetime));\r\n      else\r\n        for (int i = 0; i < options; i++) trips.add(Generator.generateTripForwards(datetime));\r\n      adapter.setTrips(trips);\r\n      adapter.notifyDataSetChanged();\r\n    });\r\n  }\r\n\r\n  private void setupRecyclerView() {\r\n    RecyclerView recyclerView = findViewById(R.id.recyclerView);\r\n    adapter = new TripPlannerRecyclerViewAdapter(trips);\r\n    recyclerView.setItemAnimator(new DefaultItemAnimator());\r\n    recyclerView.setLayoutManager(new LinearLayoutManager(this));\r\n    recyclerView.setAdapter(adapter);\r\n  }\r\n\r\n  class TripPlannerRecyclerViewAdapter extends RecyclerView.Adapter<TripPlannerRowViewHolder> {\r\n    private List<Trip> trips;\r\n    private boolean isSensitiveToNoiseActive;\r\n    private boolean isPrioritiseSeatsActive;\r\n\r\n    public TripPlannerRecyclerViewAdapter(List<Trip> trips) {\r\n      this.trips = trips;\r\n      this.isSensitiveToNoiseActive = false;\r\n      this.isPrioritiseSeatsActive = false;\r\n    }\r\n    public void setSensitiveToNoiseActive(boolean active) {\r\n      isSensitiveToNoiseActive = active;\r\n    }\r\n\r\n    public void setPrioritiseSeatsActive(boolean active) {\r\n      isPrioritiseSeatsActive = active;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public TripPlannerRowViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n      View v = LayoutInflater.from(PlanTripActivity.this).inflate(R.layout.plan_trip_row, parent, false);\r\n      return new TripPlannerRowViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull TripPlannerRowViewHolder v, int position) {\r\n      Trip trip = trips.get(position);\r\n      Map<TravelType, Integer> counts = new HashMap<>(TravelType.values().length);\r\n      Map<TravelType, Integer> durations = new HashMap<>(TravelType.values().length);\r\n      Map<TravelType, Double> averageNoiseLevelByType = trip.getTravelMethods().stream()\r\n          .collect(Collectors.groupingBy(TravelMethod::getType,\r\n              Collectors.averagingInt(tm -> tm.getNoiseLevel().toProgressBarPercentage())));\r\n      Map<TravelType, Double> averageUsedCapacityByType = trip.getTravelMethods().stream()\r\n          .collect(Collectors.groupingBy(TravelMethod::getType,\r\n              Collectors.averagingInt(tm -> tm.getUsedCapacity().toProgressBarPercentage())));\r\n      for (TravelMethod tm : trip.getTravelMethods()) {\r\n        counts.merge(tm.getType(), 1, Integer::sum);\r\n        durations.merge(tm.getType(), (int) ChronoUnit.MINUTES.between(tm.getDepartAt(), tm.getArriveAt()), Integer::sum);\r\n      }\r\n      v.walkRow.setVisibility(!counts.containsKey(TravelType.WALK) ? View.GONE : View.VISIBLE);\r\n      v.busRow.setVisibility(!counts.containsKey(TravelType.BUS) ? View.GONE : View.VISIBLE);\r\n      v.trainRow.setVisibility(!counts.containsKey(TravelType.TRAIN) ? View.GONE : View.VISIBLE);\r\n      v.ferryRow.setVisibility(!counts.containsKey(TravelType.FERRY) ? View.GONE : View.VISIBLE);\r\n\r\n      for (Map.Entry<TravelType, Integer> countEntry : counts.entrySet()) {\r\n        String count = String.valueOf(countEntry.getValue());\r\n        String name = Utils.calculateWordForQuantity(countEntry.getKey().toString().toLowerCase(), countEntry.getValue());\r\n        String duration = durations.getOrDefault(countEntry.getKey(), 0) + \" minutes\";\r\n\r\n        int noiseLevel = (int) Math.round(averageNoiseLevelByType.getOrDefault(countEntry.getKey(), 0d));\r\n        int usedCapacity = (int) Math.round(averageUsedCapacityByType.getOrDefault(countEntry.getKey(), 0d));\r\n\r\n        // Retrieve the UserNoiseBaseLevel from SharedPreferences\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserDataPref\", Context.MODE_PRIVATE);\r\n        int UserNoiseBaseLevel = sharedPreferences.getInt(\"UserNoiseBaseLevel\", 0);\r\n        int GlobalNoiseBaseLevelThreshold = 10;\r\n        int GlobalPrioritiseSeatsThreshold = 25;\r\n\r\n        if (isSensitiveToNoiseActive) {\r\n          noiseLevel = Math.max(0, noiseLevel + GlobalNoiseBaseLevelThreshold + UserNoiseBaseLevel); // Adjust the noise level value here according to user's personalised noise threshold\r\n        }\r\n\r\n        if (isPrioritiseSeatsActive) {\r\n          usedCapacity = Math.max(0, usedCapacity + GlobalPrioritiseSeatsThreshold); // Change the value here for the baseline of how much to adjust the capacity level\r\n        }\r\n\r\n        @ColorRes int noiseLevelColor = Utils.getProgressBarColor(noiseLevel);\r\n        @ColorRes int usedCapacityColor = Utils.getProgressBarColor(usedCapacity);\r\n\r\n        if (countEntry.getKey() == TravelType.WALK) {\r\n          v.walkCount.setText(count);\r\n          v.walkName.setText(name);\r\n          v.walkDuration.setText(duration);\r\n          v.walkNoiseLevel.setProgress(noiseLevel);\r\n          v.walkNoiseLevel.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));\r\n          v.walkUsedCapcity.setProgress(usedCapacity);\r\n          v.walkUsedCapcity.setProgressTintList(ColorStateList.valueOf(getResources().getColor(usedCapacityColor)));\r\n        } else if (countEntry.getKey() == TravelType.BUS) {\r\n          v.busCount.setText(count);\r\n          v.busName.setText(name);\r\n          v.busDuration.setText(duration);\r\n          v.busNoiseLevel.setProgress(noiseLevel);\r\n          v.busNoiseLevel.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));\r\n          v.busUsedCapcity.setProgress(usedCapacity);\r\n          v.busUsedCapcity.setProgressTintList(ColorStateList.valueOf(getResources().getColor(usedCapacityColor)));\r\n        } else if (countEntry.getKey() == TravelType.TRAIN) {\r\n          v.trainCount.setText(count);\r\n          v.trainName.setText(name);\r\n          v.trainDuration.setText(duration);\r\n          v.trainNoiseLevel.setProgress(noiseLevel);\r\n          v.trainNoiseLevel.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));\r\n          v.trainUsedCapcity.setProgress(usedCapacity);\r\n          v.trainUsedCapcity.setProgressTintList(ColorStateList.valueOf(getResources().getColor(usedCapacityColor)));\r\n        } else if (countEntry.getKey() == TravelType.FERRY) {\r\n          v.ferryCount.setText(count);\r\n          v.ferryName.setText(name);\r\n          v.ferryDuration.setText(duration);\r\n          v.ferryNoiseLevel.setProgress(noiseLevel);\r\n          v.ferryNoiseLevel.setProgressTintList(ColorStateList.valueOf(getResources().getColor(noiseLevelColor)));\r\n          v.ferryUsedCapcity.setProgress(usedCapacity);\r\n          v.ferryUsedCapcity.setProgressTintList(ColorStateList.valueOf(getResources().getColor(usedCapacityColor)));\r\n        }\r\n      }\r\n\r\n      LocalDateTime tripStartTime = trip.getTravelMethods().get(0).getDepartAt();\r\n      LocalDateTime tripEndTime = trip.getTravelMethods().get(trip.getTravelMethods().size() - 1).getArriveAt();\r\n      int tripDuration = (int) ChronoUnit.MINUTES.between(tripStartTime, tripEndTime);\r\n      v.leaveAt.setText(\"Leave At\\n\" + tripStartTime.format(DateTimeFormatter.ofPattern(\"hh:mma\")));\r\n      v.arriveAt.setText(\"Arrive At\\n\" + tripEndTime.format(DateTimeFormatter.ofPattern(\"hh:mma\")));\r\n      v.duration.setText(\"Duration\\n\" + tripDuration + \" minutes\");\r\n\r\n      v.clickDetector.setOnClickListener(view -> {\r\n        Intent i = new Intent(PlanTripActivity.this, ViewTripActivity.class);\r\n        i.putExtra(\"trip\", trip);\r\n        startActivity(i);\r\n      });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n      return trips.size();\r\n    }\r\n\r\n    public void setTrips(List<Trip> trips) {\r\n      this.trips = trips;\r\n    }\r\n  }\r\n\r\n  private class TripPlannerRowViewHolder extends RecyclerView.ViewHolder {\r\n    private TableRow walkRow;\r\n    private TextView walkCount;\r\n    private TextView walkName;\r\n    private TextView walkDuration;\r\n    private ProgressBar walkNoiseLevel;\r\n    private ProgressBar walkUsedCapcity;\r\n\r\n    private TableRow busRow;\r\n    private TextView busCount;\r\n    private TextView busName;\r\n    private TextView busDuration;\r\n    private ProgressBar busNoiseLevel;\r\n    private ProgressBar busUsedCapcity;\r\n\r\n    private TableRow trainRow;\r\n    private TextView trainCount;\r\n    private TextView trainName;\r\n    private TextView trainDuration;\r\n    private ProgressBar trainNoiseLevel;\r\n    private ProgressBar trainUsedCapcity;\r\n\r\n    private TableRow ferryRow;\r\n    private TextView ferryCount;\r\n    private TextView ferryName;\r\n    private TextView ferryDuration;\r\n    private ProgressBar ferryNoiseLevel;\r\n    private ProgressBar ferryUsedCapcity;\r\n\r\n    private TextView leaveAt;\r\n    private TextView duration;\r\n    private TextView arriveAt;\r\n    private ConstraintLayout clickDetector;\r\n\r\n    public TripPlannerRowViewHolder(@NonNull View itemView) {\r\n      super(itemView);\r\n      walkRow = itemView.findViewById(R.id.walkRow);\r\n      walkCount = itemView.findViewById(R.id.walkCount);\r\n      walkName = itemView.findViewById(R.id.walkName);\r\n      walkDuration = itemView.findViewById(R.id.walkDuration);\r\n      walkNoiseLevel = itemView.findViewById(R.id.walkNoiseLevelProgressBar);\r\n      walkUsedCapcity = itemView.findViewById(R.id.walkUsedCapacityProgressBar);\r\n\r\n      busRow = itemView.findViewById(R.id.busRow);\r\n      busCount = itemView.findViewById(R.id.busCount);\r\n      busName = itemView.findViewById(R.id.busName);\r\n      busDuration = itemView.findViewById(R.id.busDuration);\r\n      busNoiseLevel = itemView.findViewById(R.id.busNoiseLevelProgressBar);\r\n      busUsedCapcity = itemView.findViewById(R.id.busUsedCapacityProgressBar);\r\n\r\n      trainRow = itemView.findViewById(R.id.trainRow);\r\n      trainCount = itemView.findViewById(R.id.trainCount);\r\n      trainName = itemView.findViewById(R.id.trainName);\r\n      trainDuration = itemView.findViewById(R.id.trainDuration);\r\n      trainNoiseLevel = itemView.findViewById(R.id.trainNoiseLevelProgressBar);\r\n      trainUsedCapcity = itemView.findViewById(R.id.trainUsedCapacityProgressBar);\r\n\r\n      ferryRow = itemView.findViewById(R.id.ferryRow);\r\n      ferryCount = itemView.findViewById(R.id.ferryCount);\r\n      ferryName = itemView.findViewById(R.id.ferryName);\r\n      ferryDuration = itemView.findViewById(R.id.ferryDuration);\r\n      ferryNoiseLevel = itemView.findViewById(R.id.ferryNoiseLevelProgressBar);\r\n      ferryUsedCapcity = itemView.findViewById(R.id.ferryUsedCapacityProgressBar);\r\n\r\n      leaveAt = itemView.findViewById(R.id.leaveAt);\r\n      duration = itemView.findViewById(R.id.duration);\r\n      arriveAt = itemView.findViewById(R.id.arriveAt);\r\n\r\n      clickDetector = itemView.findViewById(R.id.clickDetector);\r\n    }\r\n  }\r\n\r\n  private void getPrefilledLocations() {\r\n    Intent intent = getIntent();\r\n    if (intent.hasExtra(EXTRA_START_LOCATION) && intent.hasExtra(EXTRA_END_LOCATION)) {\r\n      String startLocation = intent.getStringExtra(EXTRA_START_LOCATION);\r\n      String endLocation = intent.getStringExtra(EXTRA_END_LOCATION);\r\n\r\n      EditText tvStartLocationET = findViewById(R.id.startLocationET);\r\n      tvStartLocationET.setText(startLocation);\r\n\r\n      EditText tvEndLocationET = findViewById(R.id.endLocationET);\r\n      tvEndLocationET.setText(endLocation);\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/olympinav/PlanTripActivity.java b/app/src/main/java/com/example/olympinav/PlanTripActivity.java
--- a/app/src/main/java/com/example/olympinav/PlanTripActivity.java	(revision d2f9b3fb2c7c50807cabbd6b61fb8309f9cb2d50)
+++ b/app/src/main/java/com/example/olympinav/PlanTripActivity.java	(date 1698661539030)
@@ -222,18 +222,15 @@
         int noiseLevel = (int) Math.round(averageNoiseLevelByType.getOrDefault(countEntry.getKey(), 0d));
         int usedCapacity = (int) Math.round(averageUsedCapacityByType.getOrDefault(countEntry.getKey(), 0d));
 
-        // Retrieve the UserNoiseBaseLevel from SharedPreferences
         SharedPreferences sharedPreferences = getSharedPreferences("UserDataPref", Context.MODE_PRIVATE);
         int UserNoiseBaseLevel = sharedPreferences.getInt("UserNoiseBaseLevel", 0);
-        int GlobalNoiseBaseLevelThreshold = 10;
-        int GlobalPrioritiseSeatsThreshold = 25;
 
         if (isSensitiveToNoiseActive) {
-          noiseLevel = Math.max(0, noiseLevel + GlobalNoiseBaseLevelThreshold + UserNoiseBaseLevel); // Adjust the noise level value here according to user's personalised noise threshold
+          noiseLevel = Math.max(0, noiseLevel + SensorData.NoiseBaseLevelThreshold.getValue() + UserNoiseBaseLevel);
         }
 
         if (isPrioritiseSeatsActive) {
-          usedCapacity = Math.max(0, usedCapacity + GlobalPrioritiseSeatsThreshold); // Change the value here for the baseline of how much to adjust the capacity level
+          usedCapacity = Math.max(0, usedCapacity + SensorData.PrioritiseSeatsThreshold.getValue());
         }
 
         @ColorRes int noiseLevelColor = Utils.getProgressBarColor(noiseLevel);
